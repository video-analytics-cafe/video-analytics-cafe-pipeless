version: "3.9"

services:
  stream:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["pipeless", "start", "--stages-dir", "."]
    ports:
      - "8012:8000"
      - "3030:3030"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=9092
      - KAFKA_TOPIC=event_server
      - KAFKA_GROUP_ID=0
      - DISPLAY=:1
    volumes:
      - './data/:/data/'
      - /tmp/.X11-unix/:/tmp/.X11-unix
    runtime: nvidia
    networks:
      - arch-network
    depends_on:
      - kafka1
      - kafka2
#      - consumer
      - kafka-ui

  kafka1:
      image: 'bitnami/kafka:latest'
      container_name: kafka1
      ports:
      #   - "2181:2181"
         - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
        KAFKA_BROKER_ID: 1
        KAFKA_CFG_NODE_ID: 1
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume1:/bitnami/kafka
      healthcheck:
        test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server=localhost:9092" ]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - arch-network

  kafka2:
      image: 'bitnami/kafka:latest'
      container_name: kafka2
      ports:
      #   - "2181:2181"
      #   - "9092:9092"
         - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
        KAFKA_BROKER_ID: 2
        KAFKA_CFG_NODE_ID: 2
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume2:/bitnami/kafka
      healthcheck:
        test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server=localhost:9092"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - arch-network

  kafka-ui:
      image: provectuslabs/kafka-ui:v0.4.0
      ports:
        - "8777:8080"
      environment:
        KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092"
        KAFKA_CLUSTERS_0_NAME: "kraft"
      networks:
        - arch-network
  postgres:
    image: postgres:14-alpine
    networks:
      - arch-network
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    #      - ./src/car_db/init_table.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - TZ=${TZ:-Europe/Luxembourg}
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - "8820:80"
    networks:
      - arch-network
    environment:
      - TZ=${TZ:-Europe/Luxembourg}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-postgres@postgres.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-postgres}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
  node-http-server:
    image: node:14
    volumes:
      - './data/:/data/'
    command: sh -c "npm install -g http-server && http-server ./data -p 6712"
    ports:
      - "6712:6712"
  rtsp-server:
    container_name: 'rtsp-server'
    build:
      context: host_video_rtcp
      dockerfile: Dockerfile
    command: bash -c "python host_video.py"
    networks:
      - arch-network
    volumes:
      - './data/:/data/'
    environment:
      - MP4_FILENAME=/data/input/demo-video-cafe.mp4
      - DST_STREAM=stream1
    ports:
      - "8554:8554"
    tty: true
    stdin_open: true
    privileged: true
  consumer:
    build:
      context: consumer
#      context: consumer-java
      dockerfile: Dockerfile
    container_name: consumer
    restart: always
    environment:
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=9092
      - KAFKA_BROKER_URL=kafka1:9092
      - KAFKA_TOPIC=event_server
      - KAFKA_GROUP_ID=0
    networks:
      - arch-network
    depends_on:
      - kafka1
      - kafka2

networks:
  arch-network:
    driver: "bridge"

volumes:
  kafka_volume1:
  kafka_volume2:
  pgadmin-data:
  postgres-data: