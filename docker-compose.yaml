version: "3.9"

services:
  stream:
    build:
      context: .
      dockerfile: Dockerfile
    command: pipeless start --stages-dir .
    ports:
      - "8012:8000"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - PIPELESS_INPUT_ADDRESS_HOST=worker
      - PIPELESS_INPUT_ADDRESS_PORT=3030
      - PIPELESS_OUTPUT_ADDRESS_HOST=stream
      - PIPELESS_OUTPUT_ADDRESS_PORT=3031
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=9092
      - KAFKA_TOPIC=event_server
      - KAFKA_GROUP_ID=0
    volumes:
      - './input/:/input/'
      - './output/:/output/'
    runtime: nvidia
    networks:
      - arch-network

  kafka1:
      image: 'bitnami/kafka:latest'
      container_name: kafka1
      ports:
      #   - "2181:2181"
         - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
        KAFKA_BROKER_ID: 1
        KAFKA_CFG_NODE_ID: 1
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume1:/bitnami/kafka
      healthcheck:
        test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server=localhost:9092" ]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - arch-network

  kafka2:
      image: 'bitnami/kafka:latest'
      container_name: kafka2
      # ports:
      #   - "2181:2181"
      #   - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
        KAFKA_BROKER_ID: 2
        KAFKA_CFG_NODE_ID: 2
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume2:/bitnami/kafka
      healthcheck:
        test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server=localhost:9092"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - arch-network

  kafka-ui:
      image: provectuslabs/kafka-ui:v0.4.0
      ports:
        - "8889:8080"
      environment:
        KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092"
        KAFKA_CLUSTERS_0_NAME: "kraft"
      networks:
        - arch-network

  consumer:
    build:
      context: consumer
      dockerfile: Dockerfile
    container_name: consumer
    restart: always
    environment:
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=9092
      - KAFKA_TOPIC=event_server
      - KAFKA_GROUP_ID=0
    networks:
      - arch-network
    depends_on:
      - kafka1
      - kafka2

networks:
  arch-network:
    driver: "bridge"

volumes:
  kafka_volume1:
  kafka_volume2: